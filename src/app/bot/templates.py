import html
from typing import List, Optional

import app.bot.buttons as buttons
from app.bot.mvc import Template, MessageContent
from app.core import Game
from app.model import Solution
from app.util import group_by_k

err_no_such_game = Template.constant_html('–¢–∞–∫–∞—è –∏–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

start_message = Template.constant(MessageContent('''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ò–ò –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–≥—Ä.
''', buttons.default_set))

about_bot = Template.constant(MessageContent('''
<b>‚ùì –û –±–æ—Ç–µ</b>

–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫—É—Ä—Å—É –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û.
''', buttons.default_set))

upload_solution = Template.constant_html('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º —Ç–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è')
rename_solution = Template.constant_html('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n–û—Ç–º–µ–Ω–∏—Ç—å: /cancel')


class _SolutionsList(Template):
    def create_message(self, args: dict) -> MessageContent:
        text = '<b>–ò–≥—Ä—ã:</b>\n\n'
        games: List[Game] = args['games']
        solutions: List[Solution] = args['solutions']
        game_name_to_solution = dict(map(lambda sol: (sol.game_name, sol), solutions))

        for game in games:
            text += game.display_name + ": "

            solution: Solution = game_name_to_solution.get(game.name)
            if solution is not None:
                text += html.escape(solution.name)
            else:
                text += '<i>[–Ω–µ—Ç —Ä–µ—à–µ–Ω–∏—è]</i>'

            text += ', /i_' + game.name
            text += '\n'

        return MessageContent(text, buttons.default_set)


solutions_list = _SolutionsList()


class _SolutionInfo(Template):
    def create_message(self, args: dict) -> MessageContent:
        game: Game = args['game']
        solution: Optional[Solution] = args['solution']

        text = f'<b>üïπ {game.display_name}</b>\n\n'
        if solution:
            text += html.escape(game.name if game.name else '[–±–µ–∑ –∏–º–µ–Ω–∏]') + '\n'
            text += '–Ø–∑—ã–∫: ' + solution.language_name + '\n'
            text += '\n'
        else:
            text += '<i>–†–µ—à–µ–Ω–∏—è –Ω–µ—Ç</i>\n'

        return MessageContent(text, buttons.solution_actions_set if solution else buttons.no_solution_actions_set)


solution_info = _SolutionInfo()


class _ChooseLanguage(Template):
    def create_message(self, args: dict) -> MessageContent:
        button_rows = group_by_k(3, args['list'])
        return MessageContent('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ç–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.', group_by_k(3, button_rows))


choose_language = _ChooseLanguage()
