from typing import List, Optional

import app.bot.buttons as buttons
from app.bot.mvc import Template, MessageContent
from app.core import Game
from app.model import Solution
from app.util import group_by_k

err_no_such_game = Template.constant_html('–¢–∞–∫–∞—è –∏–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
err_no_solution = Template.from_string_format('–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã üïπ{name}!')

start_message = Template.constant(MessageContent('''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ò–ò –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–≥—Ä.
''', buttons.default_set))

main_message = Template.constant(MessageContent('''
–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?
''', buttons.default_set))

about_bot = Template.constant(MessageContent('''
<b>‚ùì –û –±–æ—Ç–µ</b>

–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫—É—Ä—Å—É –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û.
''', buttons.default_set))

upload_solution = Template.constant(MessageContent('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º —Ç–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è', buttons.cancel_button_set))
upload_solution_too_big = Template.constant(MessageContent('–†–∞–∑–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1–ú–±', buttons.cancel_button_set))
upload_solution_ok = Template.constant(MessageContent('–†–µ—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'))
rename_solution = Template.constant(MessageContent('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n'
                                                   '3-20 —Å–∏–º–≤–æ–ª–æ–≤. –†—É—Å—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ _.', buttons.cancel_button_set))
rename_solution_ok = Template.constant(MessageContent('–ò–º—è —Ä–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.'))
challenge_link = Template.from_string_format('–ö–∏–Ω—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–º—É, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–∑–∏—Ç—å—Å—è:\n\n{link}')


class _SolutionsList(Template):
    def create_message(self, args: dict) -> MessageContent:
        text = '<b>–ò–≥—Ä—ã:</b>\n\n'
        games: List[Game] = args['games']
        solutions: List[Solution] = args['solutions']
        game_name_to_solution = dict(map(lambda sol: (sol.game_name, sol), solutions))

        for game in games:
            text += game.display_name + ": "

            solution: Solution = game_name_to_solution.get(game.name)
            if solution is not None:
                text += solution.name_as_html
            else:
                text += '<i>[–Ω–µ—Ç —Ä–µ—à–µ–Ω–∏—è]</i>'

            text += ', /i_' + game.name
            text += '\n'

        return MessageContent(text, buttons.default_set)


solutions_list = _SolutionsList()


class _SolutionInfo(Template):
    def create_message(self, args: dict) -> MessageContent:
        game: Game = args['game']
        solution: Optional[Solution] = args['solution']

        text = f'<b>üïπ {game.display_name}</b>\n\n'
        if solution:
            text += solution.name_as_html + '\n'
            text += '–Ø–∑—ã–∫: ' + solution.language_name + '\n'
            text += '\n'
        else:
            text += '<i>–†–µ—à–µ–Ω–∏—è –Ω–µ—Ç</i>\n'

        return MessageContent(text, buttons.solution_actions_set if solution else buttons.no_solution_actions_set)


solution_info = _SolutionInfo()


class _ChooseLanguage(Template):
    def create_message(self, args: dict) -> MessageContent:
        button_rows = group_by_k(3, list(map(lambda l: l.display_name, args['list'])))
        return MessageContent('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Ç–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.', button_rows)


choose_language = _ChooseLanguage()
